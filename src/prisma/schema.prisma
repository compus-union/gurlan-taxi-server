// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PSQL_URL")
}

model Client {
  id             String        @id @unique @default(cuid())
  oneId          String        @unique
  createdAt      DateTime      @default(now())
  fullname       String
  phone          String        @unique
  password       String
  bonus          String?
  moneySpent     String?
  rides          Ride[]
  status         StatusClient?
  ban            Banned?       @relation(fields: [bannedId], references: [id]) // {ban: boolean, reason: string, admin: admin_id}
  lastLogin      DateTime      @default(now())
  deleted        Boolean       @default(false)
  bannedId       String?
  Approval       Approval?     @relation(fields: [approvalId], references: [id])
  confirmation   Confirmation  @relation(fields: [confirmationId], references: [id])
  approvalId     String?
  confirmationId String
}

model Confirmation {
  id        String   @id @unique @default(cuid())
  code      String
  confirmed Boolean
  Client    Client[]
}

model Driver {
  id           String                 @id @unique @default(cuid())
  oneId        String                 @unique
  fullname     String
  phone        String[]
  password     String                 @default("")
  license      StatusLicenseDocuments @default(INVALID) // prava
  registration StatusLicenseDocuments @default(INVALID) // mashina dokumenti
  rides        Ride[]
  status       StatusDriver?
  type         DriverTypes            @default(NOTMEASURED)
  ban          Banned?                @relation(fields: [bannedId], references: [id]) // {ban: boolean, reason: string, admin: admin_id}
  createdAt    DateTime               @default(now())
  lastOnline   DateTime?
  account      String                 @default("0")
  loggedIn     Boolean                @default(false)
  deleted      Boolean                @default(false)
  rating       Int[]                  @default([])
  car          Car?
  bannedId     String?
  approval     Approval?              @relation(fields: [approvalId], references: [id])
  approvalId   String?
}

model Admin {
  id         String    @id @unique @default(cuid())
  oneId      String    @unique
  fullname   String
  phone      String
  email      String
  password   String
  type       AdminType @default(ADMIN)
  drivers    String[]  @default([])
  createdAt  DateTime  @default(now())
  approval   Approval? @relation(fields: [approvalId], references: [id]) // {approved: boolean | 'waiting', admin: admin_id, date: date} -> super admin tomonidan
  deleted    Boolean   @default(false)
  ban        Banned?   @relation(fields: [bannedId], references: [id]) // {ban: boolean, reason: string, admin: admin_id} -> super admin tomonidan
  approvalId String?
  bannedId   String?
}

model Car {
  id       String  @id @unique @default(cuid())
  oneId    String  @unique
  name     String
  color    String
  number   String
  driver   Driver? @relation(fields: [driverId], references: [id])
  driverId String? @unique
  deleted  Boolean @default(false)
}

model PrimeTime {
  id             String          @id @unique @default(cuid())
  oneId          String          @unique
  name           String
  status         StatusPrimeTime @default(DISABLED)
  startTime      String[] // [h, m, s]
  finishTime     String[] // [h, m, s]
  startTimeFull  String
  finishTimeFull String
  excWeekDays    String
  excMonth       String
  admin          Json? // {id: admin_id, changed: boolean}
  deleted        Boolean         @default(false)
}

model Ride {
  id        String     @id @unique @default(cuid())
  oneId     String     @unique
  Client    Client     @relation(fields: [clientId], references: [id])
  Driver    Driver     @relation(fields: [driverId], references: [id])
  from      Json
  to        Json
  price     String
  startedAt DateTime
  arrivedAt DateTime
  status    StatusRide
  clientId  String
  driverId  String
  deleted   Boolean    @default(false)
}

model Banned {
  id     String     @id @unique @default(cuid())
  phone  String
  admin  String
  reason String
  type   BannedType
  date   DateTime?  @default(now())
  banned Boolean    @default(false)
  Driver Driver[]
  Client Client[]
  Admin  Admin[]
}

model Approval {
  id       String              @id @unique @default(cuid())
  phone    String
  admin    String
  reason   String
  type     ApprovalPeopleTypes
  date     DateTime?           @default(now())
  approved ApprovalTypes
  Driver   Driver[]
  Client   Client[]
  Admin    Admin[]
}

model PromoCode {
  id    String   @id @unique @default(cuid())
  code  String
  date  DateTime
  users Json
  price String
}

model Price {
  id        String @id @unique @default(cuid())
  name      String
  amount    String
  minimumKm String
  maximumKm String
}

enum ApprovalTypes {
  true
  false
  waiting
}

enum StatusDriver {
  ONLINE // Ready for requests
  GOINGTOCLIENT // Has request, going to pick up the client
  WAITING // Has client, waiting the client
  ONTHEWAY // Has client, driving client to the destination
  BANNED // Just fucked up
  LIMITED // Registered, all the information is being checked by admins
  OFFLINE // Not using the app
  APPROVED // approved by admins
  IGNORED // !approved by admins
}

enum StatusClient {
  REQUESTING // Requesting a taxi
  ONTHEWAY // Has taxi driver, going to the destination
  OUT // Go out to somewhere during the ride, driver is waiting
  OFFLINE // Not using the app
  ONLINE // In the app, not requested yet
  BANNED // Just fucked up
  CONFIRMING // has confimation code, not typed yet
}

enum StatusRide {
  ACTIVE
  FINISHED
}

enum StatusLicenseDocuments {
  VALID // Ready to use
  INVALID // Not valid documents
  NONE // No documents at all
}

enum DriverTypes {
  COMFORT
  STANDARD
  MICROVAN  
  NOTMEASURED
}

enum AdminType {
  ADMIN
  SUPERADMIN
}

enum StatusPrimeTime {
  ENABLED
  DISABLED
}

enum BannedType {
  DRIVER
  CLIENT
  ADMIN
}

enum ApprovalPeopleTypes {
  ADMIN
  DRIVER
}
