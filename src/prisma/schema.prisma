// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PSQL_URL")
}

model Client {
  id         String        @id @unique @default(cuid())
  oneId      String        @unique
  createdAt  DateTime
  fullname   String
  phone      String        @unique
  password   String
  bonus      String?
  moneySpent String?
  rides      Ride[]
  status     StatusClient?
  ban        Json? // {ban: boolean, reason: string, admin: admin_id}
  lastLogin  DateTime
  deleted    Boolean       @default(false)
}

model Driver {
  id           String                 @id @unique @default(cuid())
  oneId        String                 @unique
  fullname     String
  phone        String[]
  password     String                 @default("")
  license      StatusLicenseDocuments @default(INVALID) // prava
  registration StatusLicenseDocuments @default(INVALID) // mashina dokumenti
  rides        Ride[]
  status       StatusDriver?
  type         DriverTypes            @default(NOTMEASURED)
  ban          Json? // {ban: boolean, reason: string, admin: admin_id}
  approval     Json? // {approved: boolean, admin: admin_id, date: date}
  createdAt    DateTime               @default(now())
  lastOnline   DateTime?
  account      String                 @default("0")
  deleted      Boolean                @default(false)
  rating       Int[]                  @default([])
  car          Car?
}

model Admin {
  id        String    @id @unique @default(cuid())
  oneId     String    @unique
  fullname  String
  phone     String
  email     String
  password  String
  type      AdminType @default(ADMIN)
  drivers   String[]  @default([])
  createdAt DateTime  @default(now())
  approval  Json? // {approved: boolean, admin: admin_id, date: date} -> super admin tomonidan
  deleted   Boolean   @default(false)
  ban       Json? // {ban: boolean, reason: string, admin: admin_id} -> super admin tomonidan
}

model Car {
  id       String  @id @unique @default(cuid())
  oneId    String  @unique
  name     String
  color    String
  number   String
  driver   Driver? @relation(fields: [driverId], references: [id])
  driverId String? @unique
  deleted  Boolean @default(false)
}

model SchoolTime {
  id                 String   @id @unique @default(cuid())
  oneId              String   @unique
  createdAt          DateTime @default(now())
  timeBetween        String[] // ["2023-09-08T20:03:21.217Z", "2023-09-08T20:03:21.217Z"]
  timeBetweenInHours String[] // ["20:03:21", "20:03:21"]
  disabled           Boolean?
}

model Ride {
  id        String     @id @unique @default(cuid())
  oneId     String     @unique
  Client    Client     @relation(fields: [clientId], references: [id])
  Driver    Driver     @relation(fields: [driverId], references: [id])
  from      Json
  to        Json
  price     String
  startedAt DateTime
  arrivedAt DateTime
  status    StatusRide
  clientId  String
  driverId  String
  deleted   Boolean    @default(false)
}

enum StatusDriver {
  ONLINE // Ready for requests
  GOINGTOCLIENT // Has request, going to pick up the client
  WAITING // Has client, waiting the client
  ONTHEWAY // Has client, driving client to the destination
  BANNED // Just fucked up
  LIMITED // Registered, all the information is being checked by admins
  OFFLINE // Not using the app
  APPROVED // approved by admins
}

enum StatusClient {
  REQUESTING // Requesting a taxi
  ONTHEWAY // Has taxi driver, going to the destination
  OUT // Go out to somewhere during the ride, driver is waiting
  OFFLINE // Not using the app
  ONLINE // In the app, not requested yet
  BANNED // Just fucked up
}

enum StatusRide {
  ACTIVE
  FINISHED
}

enum StatusLicenseDocuments {
  VALID // Ready to use
  INVALID // Not valid documents
  NONE // No documents at all
}

enum DriverTypes {
  COMFORT
  STANDARD
  DAMAS
  LABO
  NOTMEASURED
}

enum AdminType {
  ADMIN
  SUPERADMIN
}
